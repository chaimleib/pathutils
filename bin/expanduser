#!/usr/bin/env sh
path="$1"
my_dir="`dirname "$0"`"; . "$my_dir"/../lib/lib.sh

if ! startswith '~' "$path"; then
	echo "$path"
	exit 0
fi

userpart="${path%%\/*}"
if [ "$userpart" = "~" ]; then
    username="`whoami`"
else
    username="${userpart#*~}"
fi
rest="${path#"$userpart"}"

# We're calling to outside tools to avoid using eval. With eval, we might use
#   userhome="$(eval echo "$userpart")"
# but the above is insecure, since commands could be empedded in $userpart.
# In bash, we would use
#   eval userhome="$(printf %q "$userpart")"
# but in POSIX, we don't have a way to escape strings as with printf %q.
# This would also work, but is insecure:
if type dscl 1>/dev/null 2>/dev/null; then
    userhome="`
        dscl . read /users/${username} 2>/dev/null |
        perl -ne 'if (/^NFSHomeDirectory: (.+)$/) { print $1 . "\n" }'
        `"
else
    userhome="`getent passwd "$username" 2>/dev/null | cut -d: -f6`"
fi
if [ -z "$userhome" ]; then
    userhome="$userpart"
else
    userhome="${userhome%/}"
fi

echo "${userhome}${rest}"
